<?php

/**
 * @file
 * Module file for calendar_d8.
 */

use DateTime;
use DateTimeZone;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Block\BlockPluginInterface;

/**
 * @defgroup calendar_d8 Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_BASE_BLOCK_ID_alter() to alter a
 * specific block. To change only our block using
 * hook_block_view_BASE_BLOCK_ID_alter, we would use the function:
 * calendar_d8_block_view_example_uppercase_alter()
 *
 * We are going to uppercase the subject (the title of the block as shown to the
 * user) of any block if the string "uppercase" appears in the block title or
 * subject. Default block titles are set programmatically in the subject key;
 * titles created through the UI are saved in the title key. This module creates
 * an example block to demonstrate this effect (default title set
 * programmatically as subject).  You can also demonstrate the effect of this
 * hook by creating a new block whose title has the string 'uppercase' in it
 * (set as title through the UI).
 */
function calendar_d8_block_view_alter(array &$build, BlockPluginInterface $block) {
  // We'll search for the string 'uppercase'.
  $definition = $block->getPluginDefinition();
  if ((!empty($build[ '#configuration' ][ 'label' ]) && stristr($build[ '#configuration' ][ 'label' ], 'uppercase')) || (!empty($definition[ 'subject' ]) && stristr($definition[ 'subject' ], 'uppercase'))) {
    // This will uppercase the block title.
    $build[ '#configuration' ][ 'label' ] = Unicode::strtoupper($build[ '#configuration' ][ 'label' ]);
  }
}

/**
 * {@inheritdoc}
 */
function calendar_d8_build_display($category) {
  $html = calendar_d8_fetch_events($category);
  return $html;
}


/**
 * {@inheritdoc}
 */
function calendar_d8_fetch_events($category) {
  // pull how many days forward to go
  $days = 29;

  $tz = new DateTimeZone('America/Denver');

  $start = new DateTime("now", $tz);
  $startDate = $start->format('Y-m-d');

  $end = new DateTime("+{$days} days", $tz);
  $endDate = $end->format('Y-m-d');


  // get categories
  $categoriesString = $category;

  $categories = str_replace(",", "+", $categoriesString);
  $categories = str_replace(" ", "", $categories);

  $limit = 8;
  // if they enter 0, have no limit:
  if ($limit == 0) {
    $limit = -1;
  }

  $jsonUrl = "http://calendar.byu.edu/api/Events?event[min][date]={$startDate}&event[max][date]={$endDate}&categories={$categories}";

  $options = [
    'http' => [
      'method' => "GET",
      'header' => "Accept: application/json\r\n",
    ],
  ];

  $context = stream_context_create($options);

  $result = file_get_contents($jsonUrl, FALSE, $context);

  $jsonArr = json_decode($result, TRUE);
  $html = calendar_d8_format_featured($jsonArr, $startDate, $endDate, $limit);
  //    $html = $jsonUrl;
  return $html;
}


/**
 * {@inheritdoc}
 */
function calendar_d8_format_featured($jsonArr, $startDate, $endDate, $limit) {

  // do all the formatting here


  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  }
  else {

    $html = '<div class="overall-feature-wrapper startDate-' . $startDate . ' endDate-' . $endDate . ' calendar-widget-block display-list">';
    //    $html = '<h3>' . $startDate . ' through ' . $endDate . '</h3><p>HEre is some text.</p><p>And here is some more text.</p>';
    //
    //    $html .= '<p>the limit is ' . $limit . '</p>';
    $currentTime = new DateTime();
    $currentTime->setTimestamp(strtotime("now"));

    $first_item = TRUE;
    $count = 0;

    // establish base variables
    // columnDate: the yyyy-mm-dd format of the column it's looping through for
    // columnEventCount: the number of events already loaded for the display (max 2 per day)
    // columnId: 1,2,3 or 4
    $columnDate = $startDate;
    $columnEventCount = 0;
    $columnId = 1;
    $lastDate = date("y-m-d");

    foreach ($jsonArr as $item) {
      if ($count == $limit) {
        break;
      }
      $newDate = date("y-m-d", strtotime($item[ 'StartDateTime' ]));
      $new_date = new DateTime();
      $new_date->setTimestamp(strtotime($item[ 'StartDateTime' ]));

      if ($first_item) {
        $lastDate = date("y-m-d", strtotime($item[ 'StartDateTime' ]));
        $html .= '<div class="feature-column column-' . $columnId . '">';// start the first the column div
        $html .= '<div class="date-wrapper"><div class="date-weekday h6">' . date("l", strtotime($item[ 'StartDateTime' ])) . '</div><div class="date-day h7">' . date("M j", strtotime($item[ 'StartDateTime' ])) . '</div></div>';
        $currentTime = $new_date;
        $first_item = FALSE;
      }

      $diff = $currentTime->diff($new_date);
      // check if it's the same date or not
      if (($newDate !== $lastDate)) {
        // yes, it's a new date column
        $columnId++;
        $columnEventCount = 0;
        $html .= '</div>'; // end the column div

        // if we have another column to do, continue:
        if ($columnId == 5) {
          break;
        }
        else {
          // continue to next column
          $html .= '<div class="feature-column column-' . $columnId . '">'; // start the next column div
          $html .= '<div class="date-wrapper"><div class="date-weekday h6">' . date("l", strtotime($item[ 'StartDateTime' ])) . '</div><div class="date-day h7">' . date("M j", strtotime($item[ 'StartDateTime' ])) . '</div></div>';
          $currentTime = $new_date;
        }
      }

      // check if we've hit the max of 2
      if ($columnEventCount >= 2) {
        // skip to the next day, do nothing
      }
      else {
        //add the event to the current column
        $html .= '<div class="event event-' . $columnEventCount . '">';

        $html .= '<div class="event-content">';
        $html .= '<h4 class="event-title"><a href="' . $item[ 'FullUrl' ] . ' " target="_blank">' . $item[ 'Title' ] . '</a></h4>';

        if ($item[ 'LocationName' ] != NULL) {
          $html .= '<div class="location h5" slot="location">' . $item[ 'LocationName' ] . '</div>';
        }

        if ($item[ 'AllDay' ] == 'false') {
          $html .= '<div class="event-time h5">' . date("g:i A", strtotime($item[ 'StartDateTime' ])).'</div>';
        }
        else {
          $html .= '<div class="event-time h5">All Day</div>';
        }

        $html .= '</div>'; //close event content wrapper
        $html .= '</div>'; //close event

        // end single event
        $columnEventCount++;
      }

      $lastDate = date("y-m-d", strtotime($item[ 'StartDateTime' ]));
      $count++;
    } // end for loop
    //if there are less than 4 feature-columns, events ran out
    if($columnId < 4) {
      $html .= '</div>'; //close last feature-column
      $columnId++; // update column count
      // Add placeholder feature-columns without events
      while($columnId < 4) {
        $currentDate = date("y-m-d", strtotime($lastDate . '+1 day'));
        $html .= '<div class="feature-column column-' . $columnId . '">'; // start the next column div
        $html .= '<div class="date-wrapper"><div class="date-weekday h6">' . date("l", strtotime($currentDate)) . '</div><div class="date-day h7">' . date("M j", strtotime($currentDate)) . '</div></div></div>';
        $lastDate = $currentDate;
        $columnId++;
      }
    }
//
    //add final links column
    $html .= '<div class="feature-column column-links">';
//    $html .= "<img src=" . file_create_url(drupal_get_path('module', 'calendar_d8') . '/images/FeatureEventsLinkColumn.PNG') . " usemap=\"#events-map\" />";
//
//    $html .= "<map name=\"events-map\">
//    <area target=\"_blank\" alt=\"Full Events Calendar\" title=\"Full Events Calendar\" href=\"https://calendar.byu.edu\" coords=\"0,194,3,0,174,0,177,150,175,150\" shape=\"poly\">
//    <area target=\"_blank\" alt=\"Academic Calendar\" title=\"Academic Calendar\" href=\"/academics\" coords=\"2,202,178,162,178,299,0,299\" shape=\"poly\">
//</map>";

    $html .= '<a href="https://calendar.byu.edu" class="full-link" id="full-events-area"><div class="full-events">';
    $html .= '<div class="full-events-text">FULL<div class="larger">EVENTS</div>CALENDAR</div>';
    $html .= '<div class="full-events-button h7">View >></div>';
    $html .= '</div></a>';

    $html .= '<a href="/academics" class="academic-link" id="academic-area"><div class="academic-calendar-wrapper">';
    $html .= '<div class="academic-calendar-text"><div class="larger">ACADEMIC</div>CALENDAR</div>';
    $html .= '<div class="academic-calendar-button h7">View >></div>';
    $html .= '</div></a>';


    $html .= '</div>'; // end column-links
    $html .= '</div>'; // ending the wrapping div with start and end date classes

//    $html .= '<map name="events-map">';
//    $html .= '<area id="academic-area" target="" alt="Academic Calendar" title="Academic Calendar" href="/academic" coords="6,205,173,167,174,290,5,290" shape="poly">';
//    $html .= '<area id="full-events-area" target="_blank" alt="Full Events Calendar" title="Full Events Calendar" href="https://calendar.byu.edu" coords="4,4,173,4,174,16,6,201" shape="poly">';
//    $html .= '</map>';
  }

  return $html;
}

/**
 * @} End of "defgroup calendar_d8".
 */


