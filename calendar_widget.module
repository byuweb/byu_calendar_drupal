<?php
/**
 * @file
 * Updates the internal category list for BYU from an updated database of colleges and departments.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function calendar_widget_help($path, $arg) {

//  if($path == 'admin/structure') {
//    return t('This site has stuff');
//  }
}

function calendar_widget_menu() {
  $items['admin/config/date/calendar-widget'] = array(
      'title' => 'Calendar Widget',
      'description' => 'Set up calendar widget blocks to display events pulled from calendar.byu.edu.',
//      'page callback' => 'calendar_widget_overview_page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('calendar_widget_form'),
//      'access callback' => TRUE,
      'access arguments' => array('Administer Calendar Widget settings'),
  );
  return $items;
}

// Create permissions
function calendar_widget_permission() {
  return array(
      'Administer Calendar Widget settings' => array(
          'title' => t('Administer Calendar Widget settings'),
          'description' => t('Allow users to change Calendar Widget settings.'),
      ),
  );
}

function calendar_widget_form($form, &$form_state) {




  $form['info'] = array(
      '#type' => 'fieldset',
      '#title' => t('BYU Calendar Widget Information'),
  );
  $form['info']['intro'] = array(
      '#markup' => '<div>' . t('The BYU Calendar Widget provides various calendar blocks to show events from calendar.byu.edu on your website. Each block can be configured to display events for a specific category(ies) and in a specific display type.') . '</div>',
  );
  $form['info']['components'] = array(
      '#markup' => '<div>' . t("The tile display types require the use of BYU Component 'Calendar Tile'. To add this library, [[ insert instructions and links here - possibly make a drupal module for getting the library(ies) desired.]]") . '</div>',
  );

  $form['info']['last'] = array(
      '#markup' => '<div>' . t('If you wish to submit your own events to the BYU Calendar, you can do so at calendar.byu.edu/node/add/event. You can request your own category id to subscribe to only your events, or yours and others.') . '</div>',
  );
  $form['category_ids'] = array(
      '#type' => 'fieldset',
      '#title' => t('Most Popular Category Ids'),
  );
  $form['category_ids']['intro'] = array(
      '#markup' => '<div>' . t('The BYU Calendar site provides extensive options for subscribing to various categories (main categories, tags, departments, etc). You can see the full list of options at <a href="https://calendar.byu.edu/subscribe" target="_blank">https://calendar.byu.edu/subscribe</a>.
Below are the most common category ids for your convenience.') . '</div>',
  );
  $form['category_ids']['home'] = array(
      '#markup' => '<Br><div class="id-list" style="margin-left: 20px;">' . t("<strong>90:</strong> Subscribe to all events featured on the BYU Homepage.") . '</div>',
  );
  $form['category_ids']['arts'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>9:</strong> Arts & Entertainment") . '</div>',
  );
  $form['category_ids']['athletics'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>10:</strong> Athletics.") . '</div>',
  );
  $form['category_ids']['conferences'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>6:</strong> Conferences") . '</div>',
  );
  $form['category_ids']['devos'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>7:</strong> Devotionals & Forums") . '</div>',
  );
  $form['category_ids']['education'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>4:</strong> Education") . '</div>',
  );
  $form['category_ids']['health'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>47:</strong> Health & Wellness") . '</div>',
  );
  $form['category_ids']['studentlife'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>49:</strong> Student Life") . '</div>',
  );
  $form['category_ids']['other'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>52:</strong> Other") . '</div>',
  );
  $form['category_ids']['all'] = array(
      '#markup' => '<div class="id-list" style="margin-left: 20px;">' . t("<strong>9,10,6,7,4,47,49,52:</strong> Use all main category ids to subscribe to ALL events on the entire calendar.byu.edu website.") . '</div>',
  );
  $form['category_ids']['own'] = array(
      '#markup' => '<div>' . t('<br>If you would like to submit your own <strong>collection of events</strong> through the calendar.byu.edu system and have your own department or group id, contact BYU Communications at <a href="https://calendar.byu.edu/contact" target="_blank">https://calendar.byu.edu/contact</a>.') . '</div>',
  );

  // number of blocks settings
  $form['calendar_widget_blocks'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuring Calendar Widget Block 1'),
  );
  $form['calendar_widget_blocks']['calendar_widget_blocks_number'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of Blocks'),
          '#description' => t('Make sure, if you have existing blocks, that you do not enter a number FEWER than the number of existing blocks. Doing so would result in losing one or more blocks.'),
          '#size' => 5,
          '#maxlength' => 12,
          '#number_type' => 'decimal',
          '#field_name' => 'calendar_widget_blocks_number',
          '#element_validate' => array ('number_field_widget_validate'),
  );





// block 1
  $form['calendar_widget_block_1'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuring Calendar Widget Block 1'),
  );
//  $form['calendar_widget_block_1']['calendar_widget_dates_options'] = array(
//      '#type' => 'select',
//      '#title' => t('Number of Days'),
//      '#description' => t('How many days, including today, the calendar block will go forward.'),
//      '#default_value' => variable_get('calendar_widget_dates_options', 7),
//      '#options' => array(
//          1 => t('1 day (today only)'),
//          7 => t('7 days'),
//          10 => t('10 days'),
//          14 => t('14 days'),
//          30 => t('30 days'),
//      ),
//  );
  $form['calendar_widget_block_1']['calendar_widget_dates_1'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of Days'),
      '#description' => t('How many days, including today, the calendar block will go forward.'),
      '#default_value' => variable_get('calendar_widget_dates_1', '7'),
      '#size' => 10,
      '#maxlength' =>3,
      '#required' => TRUE,
  );
  $form['calendar_widget_block_1']['calendar_widget_categories_1'] = array(
      '#type' => 'textfield',
      '#title' => t('Categories'),
      '#description' => t('The category ids for the categories you want to show events for. You can see the list of categories and find out their ids by visiting calendar.byu.edu/subscribe. See the categories section above for options. For multiple categories, separate your ids with a comma or a plus sign. i.e. 10,4 or 10+4.'),
      '#default_value' => variable_get('calendar_widget_categories_1', '90'),
      '#size' => 60,
      '#maxlength' =>60,
      '#required' => TRUE,
  );
  $form['calendar_widget_block_1']['calendar_widget_display_type_1'] = array(
      '#type' => 'select',
      '#title' => t('Display Type'),
      '#description' => t('There are several display types available for this calendar block. To preview these display types see  [[ link here ]] . The tile formats require the BYU Component calendar tile. Read more at [[ link ]].'),
      '#default_value' => variable_get('calendar_widget_display_type_1', 1),
      '#options' => array(
          1 => t('Simple List (grouped by date)'),
          2 => t('Vertical tiles (limited to the first 3 events)'),
          3 => t('Horizontal tiles (limited to the first 3 events)'),
          4 => t('Vertical tile slider (displaying 3 at a time)'),
          5 => t('Horizontal tile slider (displaying 3 at a time)'),
      ),
  );


  // print out settings for however many blocks there are
//  print calendar_widget_print_blocks_settings();



  return system_settings_form($form);

}

function calendar_widget_print_blocks_settings($numberofBlocks) {
  $blockSettings = '';
//  for($i = 2; $i <= $numberofBlocks; $i++) {
//    $blockSettings .= "$form['calendar_widget_block_" .$i . "'] = array(
//          '#type' => 'fieldset',
//          '#title' => t('Configuring Calendar Widget Block " . $i . "'),
//      );
//        $form['calendar_widget_block_" . $i . "']['calendar_widget_dates_" . $i . "'] = array(
//            '#type' => 'textfield',
//            '#title' => t('Number of Days'),
//            '#description' => t('How many days, including today, the calendar block will go forward.'),
//            '#default_value' => variable_get('calendar_widget_dates_" .  $i . "1', '7'),
//            '#size' => 10,
//            '#maxlength' =>3,
//            '#required' => TRUE,
//        );
//        $form['calendar_widget_block_" . $i . "']['calendar_widget_categories_" . $i . "'] = array(
//            '#type' => 'textfield',
//            '#title' => t('Categories'),
//            '#description' => t('The category ids for the categories you want to show events for. You can see the list of categories and find out their ids by visiting calendar.byu.edu/subscribe. See the categories section above for options. For multiple categories, separate your ids with a comma or a plus sign. i.e. 10,4 or 10+4.'),
//            '#default_value' => variable_get('calendar_widget_categories_1', '90'),
//            '#size' => 60,
//            '#maxlength' =>60,
//            '#required' => TRUE,
//        );
//        $form['calendar_widget_block_" . $i . "']['calendar_widget_display_type_1'] = array(
//            '#type' => 'select',
//            '#title' => t('Display Type'),
//            '#description' => t('There are several display types available for this calendar block. To preview these display types see  [[ link here ]] . The tile formats require the BYU Component calendar tile. Read more at [[ link ]].'),
//            '#default_value' => variable_get('calendar_widget_display_type_1', 1),
//            '#options' => array(
//                1 => t('Simple List (grouped by date)'),
//                2 => t('Vertical tiles (limited to the first 3 events)'),
//                3 => t('Horizontal tiles (limited to the first 3 events)'),
//                4 => t('Vertical tile slider (displaying 3 at a time)'),
//                5 => t('Horizontal tile slider (displaying 3 at a time)'),
//            ),
//        );";

  }
  return $blockSettings;
}

function calendar_widget_print_block_info($blocksArray) {
  // go find out how many blocks there should be

  $numberofBlocks = variable_get('calendar_widget_blocks_number', 1);
  for ($i = 2; $i <= $numberofBlocks; $i++) {
    $blockName = 'calendar_widget_block_' . $i;
    $blocks[$blockName] = array(
      // The name that will appear in the block list.
        'info' => t('Calendar Events'),
      // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  }
  return $blocks;
}

function calendar_widget_blocks_number_validate(){
 // make sure it is 1 or higher,
  // im guessing this function is supposed to return true or false.. i just don't know if it has something available, if it passes the variable in or anything..
  $numberofBlocks = variable_get('calendar_widget_blocks_number', 1);
  if($numberofBlocks >= 1){
    return true;
  } else {
    return false;
  }
}

/**
 * Implements hook_block_info().
 * Define all the blocks for this module.
 * You can use a given hook exactly once in any module, so this hook must declare all blocks the module needs.
 */
function calendar_widget_block_info() {
  $blocks['calendar_widget_block_1'] = array(
    // The name that will appear in the block list.
      'info' => t('Calendar Events'),
    // Default setting.
      'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  //$blocks = calendar_widget_print_block_info($blocks);

  return $blocks;
}

/* -- custom fxn to fetch calendar events and return data for a block -- */
function calendar_widget_fetch_events($blockNum){
  // pull how many days forward to go
  $daysField = 'calendar_widget_categories_' . $blockNum;
  $days = variable_get($daysField, 7);
  // today's time
  $startTime = time();
  //Get today's date
  $startDateOb = date_create("@$startTime");
  date_timezone_set($startDateOb, timezone_open('America/Denver'));
  $startDate = date_format($startDateOb, 'Y-m-d');


  //Calculate the date a week ago.
  //$end_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] + $days), $today['year']);
  // have to minus days because it includes today plus $days-1 to equal total $days
  $endTime = $startTime + (($days-1) * 24 * 3600);
  $endDateOb = date_create_from_format('U', $endTime);
  date_timezone_set($endDateOb, timezone_open('America/Denver'));
  $endDate = date_format($endDateOb, 'Y-m-d');

  // convert to Y-m-d format

  // get categories
  $categoryField = 'calendar_widget_categories_' . $blockNum;
  $categoriesString = variable_get($categoryField, '90');

  $categories = str_replace(",", "+", $categoriesString);
  $categories = str_replace(" ", "", $categories);
  // placeholder
  //
//  $jsonUrl = 'https://calendar-test.byu.edu/api/Events?event[min][date]=2017-01-30&event[max][date]=2017-02-05&categories=10+151';
  $jsonUrl = 'http://calendar-test.byu.edu/api/Events?event[min][date]=' . $startDate . '&event[max][date]=' . $endDate . '&categories=' . $categories;

  $options = array(
      'http' => array(
          'method' => "GET",
          'header' => "Accept: application/json\r\n"
      )
  );

  $context = stream_context_create($options);

  $result = file_get_contents($jsonUrl, false, $context);

  $jsonArr = json_decode($result, true);
  // depending on block formatting type, process the right formatting/structure:
  $displayTypeField = 'calendar_widget_display_type_' . $blockNum;
  $displayType = variable_get($displayTypeField, 1);

  switch ($displayType) {
    case 1:  // list type, grouped by date
      $html = calendar_widget_list_format($jsonArr, $startDate, $endDate);
      break;
    case 2:  // Vertical tiles, limited to first 3
      $html = calendar_widget_vertical_tiles_limited($jsonArr, $startDate, $endDate);
      break;
    case 3:  // Horizontal tiles, limited to first 3
      $html = calendar_widget_hoizontal_tiles_limited($jsonArr, $startDate, $endDate);
      break;
    case 4:  // Vertical tiles, showing 3 in a slider
      $html = calendar_widget_vertical_tiles_slider($jsonArr, $startDate, $endDate);
      break;
    case 5:  // Horizontal tiles, showing 3 in a slider
      $html = calendar_widget_horizontal_tiles_slider($jsonArr, $startDate, $endDate);
      break;
    default:
      $html = calendar_widget_list_format($jsonArr, $startDate, $endDate);
      break;
  }

  $html = calendar_widget_list_format($jsonArr, $startDate, $endDate);

  return $html;
}

/* --------- block content formats --------- */

/* --
*  1. List format is default simple list format, listed by date groups. This is the default format.
 * It takes the array of json, the startDate and the endDate
 */
function calendar_widget_list_format($jsonArr, $startDate, $endDate) {

  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  } else {

    $html = '<div class="startDate-' . $startDate . ' endDate-' . $endDate . ' calendar-widget-block display-list">';
//    $html = '<h3>' . $startDate . ' through ' . $endDate . '</h3><p>HEre is some text.</p><p>And here is some more text.</p>';
//
  $currentTime = new DateTime();
  $currentTime->setTimestamp(strtotime("now"));

    $first_item = true;

    foreach($jsonArr as $item) {
//    $html .= '<p>There is an event.<p>';
      $new_date = new DateTime();
      $new_date->setTimestamp(strtotime($item['StartDateTime']));
      // set date's timezone if needed

      if ($first_item) {
        $html .= '<div class="date-wrapper"><div class="date-day-number">' . date("j", strtotime($item['StartDateTime'])) . '</div><div class="date-text">' . date("M, l", strtotime($item['StartDateTime'])) . '</div></div>';
        $currentTime = $new_date;
        $first_item = false;
      }

      $diff = $currentTime->diff($new_date);

      if ($diff->format('%a') !== '0') {
//        $html .= '<h3><div class="date-text">' . date("l, F j", strtotime($item['StartDateTime'])) . '</div></h3>';
        $html .= '<div class="date-wrapper"><div class="date-day-number">' . date("j", strtotime($item['StartDateTime'])) . '</div><div class="date-text">' . date("M, l", strtotime($item['StartDateTime'])) . '</div></div>';
        $currentTime = $new_date;
      }

      $html .='<div class="event">';

//    $html .= '<img src="' . $item['ImgUrl'] . '">';
      $html .= '<div class="event-content">';
      $html .= '<div class="event-title"><a href="' . $item['FullUrl'] . ' " target="_blank"><div class="title">' . $item['Title'] . '</div></a></div>';

      if ($item['AllDay'] == 'false') {
        $html .= '<div class="event-time">' . date("g:i A", strtotime($item['StartDateTime']));
        if ($item['EndDateTime'] != null) {
//          $html .= ' - ' . date("g:i A", strtotime($item['EndDateTime']));
        }
//        $html .= ' MT';
        $html .= '</div>';
      } else {
        $html .= '<div class="event-time">All Day</div>';
      }
//    if ($item['LocationName'] != null) {
////      $html .= '<div class="location">' . $item['LocationName'] . ' - <a href="http://maps.google.com/?q=' . $item['Latitude'] . ',' . $item['Longitude'] . '&z=18" target="_blank">View Map</a></div>';
//    }
//    if ($item['LowPrice'] == 0.0 && $item['LowPrice'] != null) {
////      $html .= '<div class="price">FREE</div>';
//    } else if ($item['LowPrice'] == null) {
////      $html .= '';
//    } else {
////      $html .= '<div class="price">$' . $item['LowPrice'];
//      if ($item['HighPrice'] != null) {
////        $html .= ' - $' . $item['HighPrice'];
//      }
////      $html .= '</div>';
//    }
      $item_id = uniqid();
//    if (strlen($item['Description']) <= 100) {
//      $html .= '<div class="description" data-id="' . $item_id . '">' . $item['Description'] . '<br><a href="' . $item['MoreInformationUrl'] . '">More Information</a><br><a href="http://calendar.byu.edu/iCal/Event/' . $item['EventId'] . '">Download iCal</a></div>';
//    } else {
//      $partial_description = truncate($item['Description'], 100);
//      $html .= '<div class="partial-description show" data-id="' . $item_id . '">' . $partial_description . '... <a href="#" class="see-more" data-id="' . $item_id . '">See More</a></div>';
//      $html .= '<div class="description hidden" data-id="' . $item_id . '">' . $item['Description'] . '<br><a href="' . $item['MoreInformationUrl'] . '">More Information</a><br><a href="http://calendar.byu.edu/iCal/Event/' . $item['EventId'] . '">Download iCal</a></div>';
//    }
      $html .= '</div>';
      $html .= '</div>';
    }
    $html .= '</div>'; // ending the wrapping div with start and end date classes
  }
  return $html;
}

/* --
*  2. Vertical Tiles Limited format shows 3 vertical tiles
 *  * It takes the array of json, the startDate and the endDate
 */
function calendar_widget_vertical_tiles_limited($jsonArr, $startDate, $endDate) {

  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  } else {

    $html = '<div class="startDate-' . $startDate . ' endDate-' . $endDate . '">';
//    $html = '<h3>' . $startDate . ' through ' . $endDate . '</h3><p>HEre is some text.</p><p>And here is some more text.</p>';
//
  $currentTime = new DateTime();
  $currentTime->setTimestamp(strtotime("now"));

    $first_item = true;

    foreach($jsonArr as $item) {
//    $html .= '<p>There is an event.<p>';
      $new_date = new DateTime();
      $new_date->setTimestamp(strtotime($item['StartDateTime']));
      // set date's timezone if needed

      if ($first_item) {
        $html .= '<div class="date-wrapper"><div class="date-day-number">' . date("j", strtotime($item['StartDateTime'])) . '</div><div class="date">' . date("M, l", strtotime($item['StartDateTime'])) . '</div></div>';
        $currentTime = $new_date;
        $first_item = false;
      }

      $diff = $currentTime->diff($new_date);

      if ($diff->format('%a') !== '0') {
        $html .= '<h3><div class="date">' . date("l, F j", strtotime($item['StartDateTime'])) . '</div></h3>';
        $currentTime = $new_date;
      }

      $html .='<div class="event">';

//    $html .= '<img src="' . $item['ImgUrl'] . '">';
      $html .= '<div class="event-content">';
      $html .= '<a href="' . $item['FullUrl'] . ' " target="_blank"><div class="title">' . $item['Title'] . '</div></a>';

      if ($item['AllDay'] == false) {
        $html .= '<div class="time">' . date("g:i A", strtotime($item['StartDateTime']));
        if ($item['EndDateTime'] != null) {
          $html .= ' - ' . date("g:i A", strtotime($item['EndDateTime']));
        }
        $html .= ' MT </div>';
      } else {
        $html .= '<div class="time">All Day</div>';
      }

//      $item_id = uniqid();

      $html .= '</div>';
      $html .= '</div>';
    }
    $html .= '</div>'; // ending the wrapping div with start and end date classes
  }

  return $html;

}

/* --
*  3. Horizontal Tiles Limited format shows 3 horizontal tiles
 *  * It takes the array of json, the startDate and the endDate
 */
function calendar_widget_hoizontal_tiles_limited($jsonArr, $startDate, $endDate) {

  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  } else {

    $html = '<div class="startDate-' . $startDate . ' endDate-' . $endDate . '">test: </div>';
//    $html = '<h3>' . $startDate . ' through ' . $endDate . '</h3><p>HEre is some text.</p><p>And here is some more text.</p>';
//
    $currentTime = new DateTime();
    $currentTime->setTimestamp(strtotime("now"));

    $first_item = true;

    foreach($jsonArr as $item) {
//    $html .= '<p>There is an event.<p>';
      $new_date = new DateTime();
      $new_date->setTimestamp(strtotime($item['StartDateTime']));
      // set date's timezone if needed

      if ($first_item) {
        $html .= '<div class="date-day-number">' . date("j", strtotime($item['StartDateTime'])) . '</div><div class="date">' . date("M, l", strtotime($item['StartDateTime'])) . '</div>';
        $currentTime = $new_date;
//        $first_item = false;
      }

      $diff = $currentTime->diff($new_date);

      if ($diff->format('%a') !== '0') {
        $html .= '<h3><div class="date">' . date("l, F j", strtotime($item['StartDateTime'])) . '</div></h3>';
        $currentTime = $new_date;
      }

      $html .='<div class="event">';

//    $html .= '<img src="' . $item['ImgUrl'] . '">';
      $html .= '<div class="event-content">';
      $html .= '<a href="' . $item['FullUrl'] . ' " target="_blank"><div class="title">' . $item['Title'] . '</div></a>';

      if ($item['AllDay'] == false) {
        $html .= '<div class="time">' . date("g:i A", strtotime($item['StartDateTime']));
        if ($item['EndDateTime'] != null) {
          $html .= ' - ' . date("g:i A", strtotime($item['EndDateTime']));
        }
        $html .= ' MT </div>';
      } else {
        $html .= '<div class="time">All Day</div>';
      }

//      $item_id = uniqid();

      $html .= '</div>';
      $html .= '</div>';
    }
    $html .= '</div>'; // ending the wrapping div with start and end date classes
  }

  return $html;

}



/* --
*  4. Vertical Tiles Slider format shows 3 vertical tiles, scrolling through a slider
 *  * It takes the array of json, the startDate and the endDate
 */
function calendar_widget_vertical_tiles_limited($jsonArr, $startDate, $endDate) {

  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  } else {
// add content to html
  }

  return $html;

}

/* --
*  5. Horizontal Tiles Slider format shows 3 horizontal tiles, scrolling through a slider
 *  * It takes the array of json, the startDate and the endDate
 */
function calendar_widget_hoizontal_tiles_slider($jsonArr, $startDate, $endDate) {

  if (empty($jsonArr)) {
    // list is empty.
    $html = "<h3>No events.</h3>";
  } else {
// add content to html
  }

  return $html;

}




/* test function to fetch events posted recently -- */
function calendar_widget_contents() {
  //Get today's date
  $today = getdate();
  //Calculate the date a week ago.
  $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();

  //Use Database API to retrieve current posts.
  $recentNodes = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('status', 1) //Published.
      ->condition('created', array($start_time, $end_time), 'BETWEEN')
      ->orderBy('created', 'DESC') //Most recent first.
      ->execute();
  return $recentNodes;

}


/*
*
 *
*/

function calendar_widget_block_view($delta = '') {


  switch ($delta) {
    case 'calendar_widget_block_1':
      $block['subject'] = t('Calendar Widget Text');
      if (user_access('access content')) {
        // Retrieve and process data here.
        // Use our custom function to retrieve data.
//        $result = calendar_widget_contents();
        $result = calendar_widget_fetch_events(1);
        // Array to contain items for the block to render.
        //$items = array();

        // return back to the block
        // No data returned for the block / no events.
          if (empty($result)) {
            $block['content'] = t('No events.');
          }
          else {
            //Pass data through theme function.
            $block['content'] = t($result);

            //$block['content'] = theme('item_list', array(
//                'items' => $items));
//            $block['content'] = t('There are events.');
            // calendar_widget_fetch_events(){
          }
        }
        return $block;


  }

}